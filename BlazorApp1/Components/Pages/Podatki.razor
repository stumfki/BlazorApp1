@page "/podatki"
@inject IJSRuntime JSRuntime
@using BlazorApp1.Services
@using BlazorApp1.Models
@inject IUserService UserService
@rendermode InteractiveServer

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
        </div>
    </div>
}
else
{
    <h3>Podatki</h3>
    <table class="table">
        <thead>
            <tr>
                @foreach (var header in userHeaders)
                {
                    <th>@header</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var user in pagedUsers)
            {
                <tr>
                    <td><img src="@user.Picture.Thumbnail" alt="User Picture" /></td>
                    <td>@user.Gender</td>
                    <td>@user.Name.Title @user.Name.First @user.Name.Last</td>
                    <td>@user.Email</td>
                    <td>@user.Location.City, @user.Location.State</td>
                    <td>@user.Phone</td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        <button class="btn btn-secondary" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
        <button class="btn btn-secondary" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">Next</button>
        <span>Page @currentPage of @totalPages</span>
    </div>
}
@code {
    private bool isLoading = true;
    private IEnumerable<User> users = new List<User>();
    private IEnumerable<User> pagedUsers => users.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage);
    private string[] userHeaders;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            users = await UserService.GetUsers();
            totalItems = users.Count();
            isLoading = false;
            userHeaders = typeof(User).GetProperties().Select(prop => prop.Name).ToArray();
            StateHasChanged();
        }
    }

    //Table Code
    private int currentPage = 1;
    private int itemsPerPage = 5;
    private int totalItems;
    private int totalPages => (int)Math.Ceiling((double)totalItems / itemsPerPage);
    private bool CanGoToNextPage => currentPage < totalPages;
    private bool CanGoToPreviousPage => currentPage > 1;

    private void GoToNextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void GoToPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }
}
